/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ShopImport } from './routes/shop'
import { Route as ProfileImport } from './routes/profile'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as CartIndexImport } from './routes/cart/index'
import { Route as ProfileAuthenticationImport } from './routes/profile/authentication'
import { Route as ProductsProductIdImport } from './routes/products/$productId'
import { Route as CartCheckoutImport } from './routes/cart/checkout'
import { Route as AuthSignUpImport } from './routes/auth/sign-up'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create/Update Routes

const ShopRoute = ShopImport.update({
  id: '/shop',
  path: '/shop',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProfileRoute,
} as any)

const CartIndexRoute = CartIndexImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileAuthenticationRoute = ProfileAuthenticationImport.update({
  id: '/authentication',
  path: '/authentication',
  getParentRoute: () => ProfileRoute,
} as any)

const ProductsProductIdRoute = ProductsProductIdImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRoute,
} as any)

const CartCheckoutRoute = CartCheckoutImport.update({
  id: '/cart/checkout',
  path: '/cart/checkout',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/shop': {
      id: '/shop'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof ShopImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof rootRoute
    }
    '/cart/checkout': {
      id: '/cart/checkout'
      path: '/cart/checkout'
      fullPath: '/cart/checkout'
      preLoaderRoute: typeof CartCheckoutImport
      parentRoute: typeof rootRoute
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdImport
      parentRoute: typeof rootRoute
    }
    '/profile/authentication': {
      id: '/profile/authentication'
      path: '/authentication'
      fullPath: '/profile/authentication'
      preLoaderRoute: typeof ProfileAuthenticationImport
      parentRoute: typeof ProfileImport
    }
    '/cart/': {
      id: '/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof ProfileImport
    }
  }
}

// Create and export the route tree

interface ProfileRouteChildren {
  ProfileAuthenticationRoute: typeof ProfileAuthenticationRoute
  ProfileIndexRoute: typeof ProfileIndexRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileAuthenticationRoute: ProfileAuthenticationRoute,
  ProfileIndexRoute: ProfileIndexRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRouteWithChildren
  '/shop': typeof ShopRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/cart/checkout': typeof CartCheckoutRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/profile/authentication': typeof ProfileAuthenticationRoute
  '/cart': typeof CartIndexRoute
  '/profile/': typeof ProfileIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/shop': typeof ShopRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/cart/checkout': typeof CartCheckoutRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/profile/authentication': typeof ProfileAuthenticationRoute
  '/cart': typeof CartIndexRoute
  '/profile': typeof ProfileIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/profile': typeof ProfileRouteWithChildren
  '/shop': typeof ShopRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/cart/checkout': typeof CartCheckoutRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/profile/authentication': typeof ProfileAuthenticationRoute
  '/cart/': typeof CartIndexRoute
  '/profile/': typeof ProfileIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/shop'
    | '/auth/login'
    | '/auth/sign-up'
    | '/cart/checkout'
    | '/products/$productId'
    | '/profile/authentication'
    | '/cart'
    | '/profile/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/shop'
    | '/auth/login'
    | '/auth/sign-up'
    | '/cart/checkout'
    | '/products/$productId'
    | '/profile/authentication'
    | '/cart'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/profile'
    | '/shop'
    | '/auth/login'
    | '/auth/sign-up'
    | '/cart/checkout'
    | '/products/$productId'
    | '/profile/authentication'
    | '/cart/'
    | '/profile/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProfileRoute: typeof ProfileRouteWithChildren
  ShopRoute: typeof ShopRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  CartCheckoutRoute: typeof CartCheckoutRoute
  ProductsProductIdRoute: typeof ProductsProductIdRoute
  CartIndexRoute: typeof CartIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProfileRoute: ProfileRouteWithChildren,
  ShopRoute: ShopRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  CartCheckoutRoute: CartCheckoutRoute,
  ProductsProductIdRoute: ProductsProductIdRoute,
  CartIndexRoute: CartIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/profile",
        "/shop",
        "/auth/login",
        "/auth/sign-up",
        "/cart/checkout",
        "/products/$productId",
        "/cart/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx",
      "children": [
        "/profile/authentication",
        "/profile/"
      ]
    },
    "/shop": {
      "filePath": "shop.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/sign-up": {
      "filePath": "auth/sign-up.tsx"
    },
    "/cart/checkout": {
      "filePath": "cart/checkout.tsx"
    },
    "/products/$productId": {
      "filePath": "products/$productId.tsx"
    },
    "/profile/authentication": {
      "filePath": "profile/authentication.tsx",
      "parent": "/profile"
    },
    "/cart/": {
      "filePath": "cart/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.tsx",
      "parent": "/profile"
    }
  }
}
ROUTE_MANIFEST_END */
